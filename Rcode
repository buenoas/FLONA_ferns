#######################################################
### CODIGO DAS ANALISES PARA O ARTIGO DE SAMAMBAIAS ###
### AUTOR: ANDERSON SALDANHA BUENO ####################
### DATA: 06 DE MAIO DE 2025 ##########################
#######################################################

# LIMPA A AREA DE TRABALHO
remove(list = ls())

# REMOVE A NOTACAO CIENTIFICA
options(scipen = 999)

# DEFINE A AREA DE TRABALHO
setwd("C:/Users/Anderson/OneDrive/Documents/Pesquisa/Carlos Lehn")

# CARREGA OS PACOTES
library(readxl)
library(janitor)
library(reshape2)
library(ggplot2)
library(ggpubr)
library(iNEXT)

# Importa os dados
# Adiciona uma coluna com a parcela
n1 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "N1"))
n1$parcela = "N1"
n2 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "N2"))
n2$parcela = "N2"
n3 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "N3"))
n3$parcela = "N3"
n4 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "N4"))
n4$parcela = "N4"
n5 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "N5"))
n5$parcela = "N5"
n6 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "N6"))
n6$parcela = "N6"

a1 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "A1"))
a1$parcela = "A1"
a2 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "A2"))
a2$parcela = "A2"
a3 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "A3"))
a3$parcela = "A3"
a4 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "A4"))
a4$parcela = "A4"
a5 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "A5"))
a5$parcela = "A5"
a6 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "A6"))
a6$parcela = "A6"

p1 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "P1"))
p1$parcela = "P1"
p2 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "P2"))
p2$parcela = "P2"
p3 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "P3"))
p3$parcela = "P3"
p4 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "P4"))
p4$parcela = "P4"
p5 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "P5"))
p5$parcela = "P5"
p6 = as.data.frame(read_xlsx("Tabela Amostragem samambaias e licófitas_ASB.xlsx", sheet = "P6"))
p6$parcela = "P6"

# Junta os dados
parcelas = rbind(n1, n2, n3, n4, n5, n6,
                 a1, a2, a3, a4, a5, a6,
                 p1, p2, p3, p4, p5, p6)

# Organiza os dados
colnames(parcelas) = c("subplot", "family", "species",
                       "individuals_terrestrial_0.5m", "individuals_terrestrial_1.5m",
                       "individuals_epiphytic_0.5m", "individuals_epiphytic_1.5m",
                       "plot")

parcelas = parcelas[, c(8, 1:7)]


# Corrige o nome das especies
nomes_Carlos = as.data.frame(read_xlsx("nomes_samambaias_revisado_Carlos_ASB.xlsx", sheet = "ferns_flona"))

# Seleciona so as colunas relevantes
nomes_Carlos = nomes_Carlos[, c("planilha", "nome correto revisão Carlos")]

# Arruma o nome das colunas
colnames(nomes_Carlos) = c("nome_original", "nome_correto")

# Seleciona so as linhas relevantes
nomes_Carlos = na.omit(nomes_Carlos)


# Arruma os nomes cientificos na planilha de dados brutos
parcelas$species = nomes_Carlos$nome_correto[match(parcelas$species,
                                                   nomes_Carlos$nome_original)]

# Adiciona o tipo florestal
parcelas$forest_type = NA
parcelas$forest_type[grepl("N", parcelas$plot)] = "natural_forest"
parcelas$forest_type[grepl("A", parcelas$plot)] = "araucaria_plantation"
parcelas$forest_type[grepl("P", parcelas$plot)] = "pine_plantation"

# Converte a coluna tipo florestal em fator
parcelas$forest_type = factor(parcelas$forest_type,
                              levels = c("natural_forest",
                                         "araucaria_plantation",
                                         "pine_plantation"))

# Reordena as colunas
parcelas = parcelas[, c(9, 1:8)]

# Visualiza os dados
head(parcelas)

# Importa o nome das familias das especies
reflora = read.csv("samambaias_RS_REFLORA.csv")

# Atualiza o nome das familias
parcelas$family = reflora$family[match(parcelas$species,
                                       reflora$species)]

# Substitui " " (espaco) por "_" no nome das especies
parcelas$species = gsub(" ", "_", parcelas$species)

# Troca o nome de uma coluna
colnames(parcelas)[colnames(parcelas) == "forest_type"] = "habitat"

# Salva a tabela de dados brutos definitiva
write.table(parcelas, "raw_data_FLONA_ferns.txt", sep = "\t", row.names = FALSE)


####################################################
### REORGANIZACAO DOS DADOS PARA O FORMATO LONGO ###
####################################################

### Posso comecar daqui se eu importar o arquivo 'raw_data_FLONA_ferns.txt' do GitHub ###

# Importa os dados do GitHub
raw_data = read.table("https://raw.githubusercontent.com/buenoas/FLONA_ferns/main/raw_data_FLONA_ferns.txt", header = TRUE)

# Transforma a coluna habitat de character para factor
raw_data$habitat = factor(raw_data$habitat,
                          levels = c("natural_forest",
                                     "araucaria_plantation",
                                     "pine_plantation"))

# Transforma a coluna plot de character para factor
raw_data$plot = factor(raw_data$plot,
                       levels = c("N1", "N2", "N3", "N4", "N5", "N6",
                                  "A1", "A2", "A3", "A4", "A5", "A6",
                                  "P1", "P2", "P3", "P4", "P5", "P6"))

# Transforma a coluna subplot de numeric para factor
raw_data$subplot = factor(raw_data$subplot,
                          levels = unique(sort(raw_data$subplot)))

# Organiza os dados no formato longo 
ferns = melt(raw_data)

# Renomeia colunas
colnames(ferns)[colnames(ferns) == "variable"] = "habit_distance"
colnames(ferns)[colnames(ferns) == "value"] = "individuals"

# Deleta "individuals_" da coluna "habit_distance"
ferns$habit_distance = gsub("individuals_", "", ferns$habit_distance)

# Transforma a coluna habit_distance de character para factor
ferns$habit_distance = factor(ferns$habit_distance,
                              levels = c("terrestrial_0.5m", "terrestrial_1.5m",
                                         "epiphytic_0.5m", "epiphytic_1.5m"))

# Organiza as linhas
ferns = ferns[order(ferns$habitat,
                    ferns$plot,
                    ferns$subplot,
                    ferns$habit_distance,
                    ferns$family,
                    ferns$species), ]

# Remove o nome das linhas
rownames(ferns) = NULL

# Separa a coluna "habit_distance" em "habit" e "distance"
# habit
ferns$habit = ferns$habit_distance
ferns$habit = gsub("_0.5m", "", ferns$habit)
ferns$habit = gsub("_1.5m", "", ferns$habit)

# distance
ferns$distance_m = ferns$habit_distance
ferns$distance_m = gsub("terrestrial_", "", ferns$distance_m)
ferns$distance_m = gsub("epiphytic_", "", ferns$distance_m)
ferns$distance_m = gsub("m", "", ferns$distance_m)
ferns$distance_m = as.numeric(ferns$distance_m)

# Deleta a coluna "habit_distance"
ferns$habit_distance = NULL

# Reorganiza as colunas
ferns = ferns[, c(1:5, 7, 8, 6)]

# Visualiza os dados
head(ferns)

# Salva os dados
#write.table(ferns, "FLONA_ferns.txt", sep = "\t", row.names = FALSE)


#########################
### ANALISE DOS DADOS ###
#########################

# Remove as linhas com zero individuos
ferns = subset(ferns, individuals > 0)

# Total number of species
length(unique(ferns$species))

# Total number of individuals
sum(ferns$individuals)

# Organiza os dados para produzir as curvas de rarefacao
raref_data = as.data.frame(tapply(ferns$individuals,
                                  list(ferns$species,
                                       ferns$habitat),
                                  FUN = sum))

# Converte NA em zero
raref_data[is.na(raref_data)] = 0

# Calcula a riqueza de especie
# Esforco padronizado por sample coverage
richness_est = estimateD(raref_data,
                         q = 0,
                         datatype = "abundance",
                         base = "coverage",
                         level = NULL,
                         nboot = 1000,
                         conf = 0.95)

# Produz as curvas de rarefacao
raref = iNEXT(raref_data,
              q = 0,
              datatype = "abundance",
              size = NULL,
              endpoint = NULL,
              knots = max(colSums(raref_data)) * 2,
              se = FALSE,
              conf = 0.95,
              nboot = 1000)

# Organiza os resultados (raref) para produzir o grafico
richness_data = raref$iNextEst$size_based

# Organiza os tipos florestais
richness_data$Assemblage = factor(richness_data$Assemblage,
                                  levels = c("natural_forest",
                                             "araucaria_plantation",
                                             "pine_plantation"))

# Produz o grafico
rich_graph =
  
  ggplot(data = richness_data,
         mapping = aes(x = m, y = qD,
                       colour = Assemblage)) +
  
  labs(x = "Number of individuals",
       y = "Number of fern species",
       colour = NULL) +
  
  geom_line(data = subset(richness_data, Method == "Extrapolation"),
            linewidth = 0.8, linetype = "dashed") +
  geom_line(data = subset(richness_data, Method != "Extrapolation"),
            linewidth = 0.8, linetype = "solid") +
  geom_errorbar(data = richness_est,
                mapping = aes(ymin = qD.LCL, ymax = qD.UCL),
                width = 150) +
  geom_point(data = richness_est,
             mapping = aes(x = m, y = qD, colour = Assemblage),
             size = 2.5, show.legend = FALSE) +
  
  scale_x_continuous(breaks = c(1, 2500, 5000, 7500, 9706)) +
  scale_y_continuous(limits = c(NA, 42),
                     breaks = c(1, 10, 20, 30, 40)) +
  scale_colour_manual(labels = c("Natural Forest",
                                 "Araucaria Plantation",
                                 "Pine Plantation"),
                      values = c("#2DBF81", "#812DBF","#BF812D")) +
  
  annotate("text", x = 1, y = max(richness_est$qD.UCL),
           hjust = 0, vjust = 1, colour = "black", size = 3,
           label = "Sample coverage = 0.9998") +
  
  theme_pubr() +
  theme(legend.position = c(0.97, 0.03),
        legend.justification = c(0.97, 0.03),
        legend.text = element_text(size = 8),
        axis.text = element_text(size = 10),
        axis.line = element_line(linewidth = 1/3),
        axis.ticks = element_line(linewidth = 1/3))

rich_graph

ggsave(rich_graph, filename = "richness.jpg", dpi = 600,
       w = 12, h = 12, units = "cm")
